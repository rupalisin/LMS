// <auto-generated />
using DataAccessLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccessLayer.Migrations
{
    [DbContext(typeof(LibraryDbContext))]
    partial class LibraryDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DataObjectLayer.Book", b =>
                {
                    b.Property<int>("bookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("bookId"), 1L, 1);

                    b.Property<string>("Author_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Book_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Currently_Borrowed_By_User_Id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("Is_Book_Available")
                        .HasColumnType("bit");

                    b.Property<int>("Lent_By_User_id")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("genre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("bookId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("DataObjectLayer.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Books_Borrowed")
                        .HasColumnType("int");

                    b.Property<int>("Books_Lent")
                        .HasColumnType("int");

                    b.Property<string>("ConfirmPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Tokens_Available")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Books_Borrowed = 0,
                            Books_Lent = 0,
                            ConfirmPassword = "mark@123",
                            Email = "mark@gmail.com",
                            Name = "Mark Stark",
                            Password = "mark@123",
                            Token = " ",
                            Tokens_Available = 1,
                            UserName = "stark123"
                        },
                        new
                        {
                            Id = 2,
                            Books_Borrowed = 0,
                            Books_Lent = 0,
                            ConfirmPassword = "rupali@123",
                            Email = "rups@gmail.com",
                            Name = "Rupali Singh",
                            Password = "rupali@123",
                            Token = " ",
                            Tokens_Available = 1,
                            UserName = "rups"
                        },
                        new
                        {
                            Id = 3,
                            Books_Borrowed = 0,
                            Books_Lent = 0,
                            ConfirmPassword = "ronitroy@123",
                            Email = "ronit@gmail.com",
                            Name = "Ronit Roy",
                            Password = "ronitroy@123",
                            Token = " ",
                            Tokens_Available = 1,
                            UserName = "ronit"
                        },
                        new
                        {
                            Id = 4,
                            Books_Borrowed = 0,
                            Books_Lent = 0,
                            ConfirmPassword = "abc@123",
                            Email = "john@gmail.com",
                            Name = "John Disouza",
                            Password = "abc@123",
                            Token = " ",
                            Tokens_Available = 1,
                            UserName = "john"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
